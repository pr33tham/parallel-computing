    1 /* PROGRAM NumericalIntegration */
    2 #include <stdlib.h>
    3 #include <math.h>
    4 
    5 #define numproc 120 /*number of processes*/
    6 #define numpoints 60 /*number of points per process*/
    7 
    8 float process[numproc];
    9 float stream globalSumValue[numproc];
   10 float globalsum;
   11 int i;
   12 
   13 spinlock L;
   14 
   15 float f(float t) { /*Function to be integrated*/
   16     /*Compute value of f(t)*/
   17     return sqrt(4 - t * t);
   18 }
   19 
   20 main( ) {
   21     cout.precision(10);
   22     float start, end, w, answer;
   23     /*Initialize values of end points “a” and “b”*/
   24     start = 0;
   25     end = 2;
   26     w = (end-start)/(numproc*numpoints); /*spacing of points*/
   27     forall i = 0 to numproc-1 do {
   28         /*Create processes*/
   29         float sum = 0;
   30         float t;
   31         int j;
   32         t = start + i * (end - start) / numproc;
   33         for(j = 0; j < numpoints; j++) {
   34             sum = sum + f(t);
   35             t = t + w;
   36         }
   37         sum = w * sum;
   38         Lock(L);
   39         globalsum = globalsum + sum;
   40         Unlock(L);
   41     }
   42     for(i = 0; i < numproc; i++) {
   43         globalsum = globalsum + process[i];
   44     }
   45     answer = globalsum + w/2 *(f(end)-f(start)); /*end points*/
   46 	cout << "Integral of f(x) from a to b :" << answer;
   47 }
